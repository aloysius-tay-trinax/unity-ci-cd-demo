name: Build project

on:
  push:
    tags:
      - '*'
# on:
#   # pull_request: {}
#   # push: { branches: [master] }

env:
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}

jobs:
  upload-release-to-github-releases:
    name: Upload release to Github Releases
    runs-on: ubuntu-latest
    needs: release-project
    steps:
      - name: Get Release url
        id: get_release
        uses: bruceadams/get-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - run: echo ${{ steps.get_release.outputs.upload_url }}

      - name: Get latest release version number
        id: get_version
        uses: battila7/get-version-action@v2

      - run: echo ${{ steps.get_version.outputs.version }}

      - name: Download build
        uses: actions/download-artifact@v2
        with:
          name: Build

      - name: Archive build
        uses: thedoctor0/zip-release@master
        with:
          filename: release.zip
          exclusions: '*.git* /*node_modules/*'

      - name: Upload asset to Github Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./release.zip
          asset_name: release-v${{ steps.get_version.outputs.version }}.zip
          asset_content_type: application/zip

  release-project:
    name: Release build to Github Releases
    runs-on: ubuntu-latest
    needs: build-project
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create Release
        uses: anton-yurchenko/git-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DRAFT_RELEASE: 'false'
          PRE_RELEASE: 'false'
          CHANGELOG_FILE: 'CHANGELOG.md'
          ALLOW_EMPTY_CHANGELOG: 'false'
          ALLOW_TAG_PREFIX: 'false'

  build-project:
    name: Build for ${{ matrix.targetPlatform }} on version ${{ matrix.unityVersion }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          # - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows # Build a Windows standalone.
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          # - StandaloneLinux64 # Build a Linux 64-bit standalone.
          # - iOS # Build an iOS player.
          # - Android # Build an Android .apk standalone app.
          # - WebGL # WebGL.
          # - WSAPlayer # Build an Windows Store Apps player.
          # - PS4 # Build a PS4 Standalone.
          # - XboxOne # Build a Xbox One Standalone.
          # - tvOS # Build to Apple's tvOS platform.
          # - Switch # Build a Nintendo Switch player.
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - uses: actions/cache@v1.1.0
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-
            Library-
      - uses: game-ci/unity-builder@main
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
      - uses: actions/upload-artifact@v1
        with:
          name: Build
          path: build
